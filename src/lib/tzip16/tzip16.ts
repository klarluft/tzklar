/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * List of tools/versions used in producing the Michelson.
 */
export type ContractProducingTools = string[];
/**
 * Location (URL) of the source code.
 */
export type SourceLocation = string;
export type MichelineTzip16Expression =
  | Int
  | StringExpression
  | Bytes
  | Sequence
  | GenericPrimAnyNumberOfArgsWithOrWithoutAnnot;
/**
 * Decimal representation of a big number
 */
export type BigNumber = string;
/**
 * Either a plain UTF8 string, or a sequence of bytes for strings that contain invalid byte sequences.
 */
export type UniversalStringRepresentation =
  | string
  | {
      invalid_utf8_string: number[];
    };
export type Sequence = MichelineTzip16Expression[];

export interface ContractMetadataTZIP16 {
  /**
   * The identification of the contract.
   */
  name?: string;
  /**
   * Natural language description of the contract and/or its behavior.
   */
  description?: string;
  /**
   * The version of the contract code.
   */
  version?: string;
  /**
   * The software license of the contract.
   */
  license?: {
    /**
     * A mnemonic name for the license, see also the License-name case.
     */
    name: string;
    /**
     * Paragraphs of free text, with punctuation and proper language.
     */
    details?: string;
  };
  /**
   * The list of authors of the contract.
   */
  authors?: string[];
  /**
   * A link for humans to follow for documentation, sources, issues, etc.
   */
  homepage?: string;
  /**
   * Description of how the contract's Michelson was generated.
   */
  source?: {
    tools?: ContractProducingTools;
    location?: SourceLocation;
  };
  /**
   * The list of interfaces the contract claims to implement (e.g. TZIP-12).
   */
  interfaces?: string[];
  /**
   * Error translators.
   */
  errors?: (StaticErrorTranslator | DynamicErrorTranslator)[];
  /**
   * The storage queries, a.k.a. off-chain views provided.
   */
  views?: {
    name: string;
    /**
     * Plain language documentation of the off-chain view; with punctuation.
     */
    description?: string;
    /**
     * The list of available and equivalent implementations.
     */
    implementations: (MichelsonStorageView | RestApiQueryView)[];
    pure?: boolean;
  }[];
  [k: string]: unknown;
}
/**
 * A convertor between error codes and expanded messages.
 */
export interface StaticErrorTranslator {
  error: MichelineTzip16Expression;
  expansion: MichelineTzip16Expression;
  languages?: string[];
}
export interface Int {
  int: BigNumber;
}
export interface StringExpression {
  string: UniversalStringRepresentation;
}
export interface Bytes {
  bytes: string;
}
export interface GenericPrimAnyNumberOfArgsWithOrWithoutAnnot {
  prim: UniversalStringRepresentation;
  args?: MichelineTzip16Expression[];
  annots?: string[];
}
/**
 * An off-chain-view to call to convert error codes to expanded messages.
 */
export interface DynamicErrorTranslator {
  view: string;
  languages?: string[];
}
/**
 * An off-chain view using Michelson as a scripting language to interpret the storage of a contract.
 */
export interface MichelsonStorageView {
  michelsonStorageView: {
    /**
     * The Michelson type of the potential external parameters required by the code of the view.
     */
    parameter?: Int | StringExpression | Bytes | Sequence | GenericPrimAnyNumberOfArgsWithOrWithoutAnnot;
    /**
     * The type of the result of the view, i.e. the value left on the stack by the code.
     */
    returnType: Int | StringExpression | Bytes | Sequence | GenericPrimAnyNumberOfArgsWithOrWithoutAnnot;
    /**
     * The Michelson code expression implementing the view.
     */
    code: Int | StringExpression | Bytes | Sequence | GenericPrimAnyNumberOfArgsWithOrWithoutAnnot;
    /**
     * List of objects documenting the annotations used in the 3 above fields.
     */
    annotations?: {
      name: string;
      description: string;
    }[];
    /**
     * A string representing the version of Michelson that the view is meant to work with; versions here should be base58check-encoded protocol hashes.
     */
    version?: string;
  };
}
/**
 * An off-chain view using a REST API described in a separate OpenAPI specification. The following parameters form a pointer to the localtion in the OpenAPI description.
 */
export interface RestApiQueryView {
  restApiQuery: {
    /**
     * A URI pointing at the location of the OpenAPI specification.
     */
    specificationUri: string;
    /**
     * The URI-prefix to use to query the API.
     */
    baseUri?: string;
    /**
     * The path component of the URI to look-up in the OpenAPI specification.
     */
    path: string;
    /**
     * The HTTP method to use.
     */
    method?: "GET" | "POST" | "PUT";
  };
}
